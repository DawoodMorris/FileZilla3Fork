#! /bin/sh

. /etc/profile

if [ -e "$HOME/.profile" ]; then
  . "$HOME/.profile"
fi

function init()
{
  if [ -n "$0" -a "${0:0:1}" = "/" ]; then
    local dir="${0%/*}"
  else
    local dir="`pwd`/${0%/*}"
  fi
  if [ ! -f "$dir/../config/config" ]; then
    echo "Can't find master config."
    echo "  pwd: `pwd`"
    echo "  \$0: $0"
    echo "Aborting."
    exit 1
  fi
  cd "$dir/.."
  export PREFIX=`pwd`
  echo "Setting prefix to $PREFIX"
  cd "$dir"
  return 0
}

init || exit 1

. ../config/config
. log.sh
. updatecvs.sh
. readfile.sh
. readhosts
. readpackages
. buildspawn.sh
. makedist.sh
. filter.sh
. prebuild.sh
. postbuild.sh

function buildfailure()
{
  touch "$OUTPUTDIR/failed"
  [ -f "$OUTPUTDIR/running" ] && rm "$OUTPUTDIR/running"

  logprint "Performing cleanup"
  cd "$PREFIX"
  rm -rf "$WORKDIR"

  $SCRIPTS/clean.sh >> $LOG 2>&1

  return 1
}

applypatch()
{
  local PATCH=$1
  local PACKAGE=$2

  logprint "Applying $PATCH to $PACKAGE"
  cd $WORKDIR/source/$PACKAGE
  patch -p0 -i $PATCHDIR/$PATCH -f >> $LOG 2>&1 || buildfailure || exit 1
}

applypatches()
{
  logprint "Applying patches"
  cd "$PATCHDIR"
  local PATCHES=`find . -name "*.patch"`
  for i in $PATCHES; do
    local PATCH=${i#./}
    local PACKAGE=${PATCH%%/*}
    applypatch $PATCH $PACKAGE
  done
}

export DATE=`date "+%Y-%m-%d"`
export OUTPUTDIR="$WWWDIR/$DATE"
export LOG="$OUTPUTDIR/build.log"

rm -rf "$OUTPUTDIR"
mkdir -p "$OUTPUTDIR" || echo "Could not create output directory" >&1 && buildfailure || exit 1

cp -rp "$PATCHDIR" "$OUTPUTDIR"

touch "$OUTPUTDIR/running"
logprint "FileZilla 3 build log"
logprint "---------------------\n"
START=`date "+%Y-%m-%d %H:%M:%S"`
logprint "Build started: $START\n"

while getHost; do
  for i in $TARGETS; do
    mkdir -p "$OUTPUTDIR/$i"
    touch "$OUTPUTDIR/$i/pending"
  done
done
resetHosts

rm -rf "$WORKDIR"
mkdir -p "$WORKDIR"

updatecvs || buildfailure || exit 1

logprint "Copying source"
rm -rf "$WORKDIR/source"
cp -r "$CVSDIR" "$WORKDIR/source"

applypatches

logprint "Generating configure files"
resetPackages
while getPackage; do
  PACKAGE=${PACKAGE#-}
  cd "$WORKDIR/source/$PACKAGE"
  if [ ! -e configure ]; then
    echo "Running autogen.sh for package $PACKAGE" >> $LOG
    ./autogen.sh >> $LOG 2>&1 || buildfailure || exit 1
  fi
done

makedist || buildfailure || exit 1

prebuild >> $LOG 2>&1 || buildfailure || exit 1

logprint "Packaging packages for distribution"
cd "$WORKDIR/source"
tar -cjf $WORKDIR/packages.tar.bz2 *

function packageClientscripts()
{
  cp -r "$CLIENTSCRIPTS" "$WORKDIR"
  cp "$SCRIPTS/readpackages" "$WORKDIR/clientscripts/"
  cp "$CONFDIR/packages" "$WORKDIR/clientscripts/"

  cd "$WORKDIR"
  tar -cjf "$WORKDIR/clientscripts.tar.bz2" --exclude='.svn' clientscripts
}

logprint "Packaging clientscripts"
packageClientscripts

echo "Preparation stage complete"
echo "--------------------------"

ID=1

while getHost; do

  echo Forking buildscript $ID
  buildspawn $ID "$HOST" "$HOSTPREFIX" "$TARGETS" &

  ID=$(($ID+1))

done


echo Waiting for clients
wait 

postbuild >> $LOG 2>&1

logprint "Performing cleanup"
cd "$PREFIX"
rm -rf "$WORKDIR"

$SCRIPTS/clean.sh >> $LOG 2>&1

logprint "Completed"

touch "$OUTPUTDIR/successful"
rm "$OUTPUTDIR/running"
